# -*- coding: utf-8 -*-
"""Clustering Music Genres with Machine Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g4x0wUnhAgde-1fWREoFxjaT3rG4XM1y
"""

import pandas as pd
import numpy as np
from sklearn import cluster

data = pd.read_csv("Spotify-2000.csv")
print(data.head())

data = data.drop("Index", axis=1)

# Select only numeric columns for correlation
numeric_data = data.select_dtypes(include=['float64', 'int64'])

# Compute and print the correlation matrix
print(numeric_data.corr())

data2 = data[["Beats Per Minute (BPM)", "Loudness (dB)",
              "Liveness", "Valence", "Acousticness",
              "Speechiness"]]

from sklearn.preprocessing import MinMaxScaler
for i in data.columns:
    MinMaxScaler(i)

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=10)
clusters = kmeans.fit_predict(data2)

data["Music Segments"] = clusters
MinMaxScaler(data["Music Segments"])
data["Music Segments"] = data["Music Segments"].map({1: "Cluster 1", 2:
    "Cluster 2", 3: "Cluster 3", 4: "Cluster 4", 5: "Cluster 5",
    6: "Cluster 6", 7: "Cluster 7", 8: "Cluster 8",
    9: "Cluster 9", 10: "Cluster 10"})

print(data.head())

import plotly.graph_objects as go
PLOT = go.Figure()
for i in list(data["Music Segments"].unique()):


    PLOT.add_trace(go.Scatter3d(x = data[data["Music Segments"]== i]['Beats Per Minute (BPM)'],
                                y = data[data["Music Segments"] == i]['Energy'],
                                z = data[data["Music Segments"] == i]['Danceability'],
                                mode = 'markers',marker_size = 6, marker_line_width = 1,
                                name = str(i)))
PLOT.update_traces(hovertemplate='Beats Per Minute (BPM): %{x} <br>Energy: %{y} <br>Danceability: %{z}')


PLOT.update_layout(width = 800, height = 800, autosize = True, showlegend = True,
                   scene = dict(xaxis=dict(title = 'Beats Per Minute (BPM)', titlefont_color = 'black'),
                                yaxis=dict(title = 'Energy', titlefont_color = 'black'),
                                zaxis=dict(title = 'Danceability', titlefont_color = 'black')),
                   font = dict(family = "Gilroy", color  = 'black', size = 12))

import plotly.graph_objects as go

# Use only valid marker symbols for 3D scatter
shapes = ['circle', 'circle-open', 'diamond', 'diamond-open',
          'square', 'square-open', 'cross', 'x']  # Adjusted shape list

colors = ['red', 'blue', 'green', 'purple', 'orange', 'pink']  # Colors for each segment

PLOT = go.Figure()

# Loop through each unique music segment and plot with distinct markers and colors
for idx, segment in enumerate(data["Music Segments"].unique()):
    color = colors[idx % len(colors)]  # Cycle through colors
    shape = shapes[idx % len(shapes)]  # Use only valid shapes

    PLOT.add_trace(go.Scatter3d(
        x=data[data["Music Segments"] == segment]['Beats Per Minute (BPM)'],
        y=data[data["Music Segments"] == segment]['Energy'],
        z=data[data["Music Segments"] == segment]['Danceability'],
        mode='markers',
        marker=dict(
            size=6,
            color=color,
            symbol=shape,
            line=dict(width=1)
        ),
        name=str(segment)
    ))

# Customize hover information
PLOT.update_traces(hovertemplate=(
    'Beats Per Minute (BPM): %{x} <br>Energy: %{y} <br>Danceability: %{z}'
))

# Update layout with axis labels and appearance settings
PLOT.update_layout(
    width=800, height=800, autosize=True, showlegend=True,
    scene=dict(
        xaxis=dict(title='Beats Per Minute (BPM)', titlefont_color='black'),
        yaxis=dict(title='Energy', titlefont_color='black'),
        zaxis=dict(title='Danceability', titlefont_color='black')
    ),
    font=dict(family="Gilroy", color='black', size=12)
)

# Display the plot
PLOT.show()

